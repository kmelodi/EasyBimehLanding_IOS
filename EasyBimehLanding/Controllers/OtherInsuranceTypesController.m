//
//  EasyBimehLanding
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import "OtherInsuranceTypesController.h"

@implementation OtherInsuranceTypesController

/**
* دریافت لیست سایر بیمه نامه ها
* @param    subDomain    Required parameter: دامنه یا زیر دامنه ی مرکز بیمه
* @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
* @return	Returns the void response from the API call */
- (void) getOtherInsuranceTypesAsyncWithSubDomain:(NSString*) subDomain
                xApiKey:(NSString*) xApiKey
                completionBlock:(CompletedGetOtherInsuranceTypes) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/ComboData/OtherInsuranceTypes"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"subDomain": subDomain
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"x-api-key": xApiKey
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
             NSString* _strResult = [(HttpStringResponse*)_response body];
             OtherInsuranceTypes* _result = (OtherInsuranceTypes*) [APIHelper jsonDeserialize: _strResult
                toClass: OtherInsuranceTypes.class];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* ارسال توکن تایید شماره تماس، برای احراز هویت کاربر
* @param    mobile    Required parameter: شماره موبایل
* @param    insuranceCentreSubDomain    Required parameter: دامنه یا زیردامنه ی مرکز بیمه
* @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
* @return	Returns the void response from the API call */
- (void) getSendSmsTokenAsyncWithMobile:(NSString*) mobile
                insuranceCentreSubDomain:(NSString*) insuranceCentreSubDomain
                xApiKey:(NSString*) xApiKey
                completionBlock:(CompletedGetSendSmsToken) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/Account/SendSmsToken"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"mobile": mobile,
                    @"insuranceCentreSubDomain": insuranceCentreSubDomain
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"x-api-key": xApiKey
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
             NSString* _strResult = [(HttpStringResponse*)_response body];
             SendSmsToken* _result = (SendSmsToken*) [APIHelper jsonDeserialize: _strResult
                toClass: SendSmsToken.class];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}

/**
* تایید توکن پیامک شده به کاربر، برای احراز هویت
* @param    mobile    Required parameter: شماره موبایل
* @param    token    Required parameter: توکن دریافتی کاربر از پیامک
* @param    insuranceCentreSubDomain    Required parameter: دامنه یا زیر دامنه ی اختصاصی مرکز بیمه
* @param    aliasName    Required parameter: نام و نام خانوادگی کاربر
* @param    resource    Required parameter: دامنه ی درخواست دهنده
* @param    xApiKey    Required parameter: کلید اختصاصی ارتباط با سرور
* @return	Returns the void response from the API call */
- (void) getVerifySmsTokenAsyncWithMobile:(NSString*) mobile
                token:(int) token
                insuranceCentreSubDomain:(NSString*) insuranceCentreSubDomain
                aliasName:(NSString*) aliasName
                resource:(NSString*) resource
                xApiKey:(NSString*) xApiKey
                completionBlock:(CompletedGetVerifySmsToken) onCompleted
{
    //the base uri for api requests
    NSString* _baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* _queryBuilder = [NSMutableString stringWithString: _baseUri]; 
    [_queryBuilder appendString: @"/Account/verifySmsToken"];

    //process optional query parameters
    [APIHelper appendUrl: _queryBuilder withQueryParameters: @{
                    @"mobile": mobile,
                    @"token": [NSNumber numberWithInteger: token],
                    @"insuranceCentreSubDomain": insuranceCentreSubDomain,
                    @"aliasName": aliasName,
                    @"resource": resource
                }];

    //validate and preprocess url
    NSString* _queryUrl = [APIHelper cleanUrl: _queryBuilder];

    //preparing request headers
    NSMutableDictionary* _headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"user-agent": @"APIMATIC 2.0",
        @"accept": @"application/json",
        @"x-api-key": xApiKey
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: _headers];


    //prepare the request and fetch response  
    HttpRequest* _request = [[self clientInstance] get: ^(HttpRequest* _request) 
    { 
        [_request setQueryUrl: _queryUrl]; //set request url        
        [_request setHeaders: _headers]; //set request headers

    }];

    //use the instance of the http client to make the actual call
    [[self clientInstance]
     executeAsString: _request
     success: ^(id _context, HttpResponse *_response) {
         //Error handling using HTTP status codes
         NSError* _statusError = nil;

         //Error handling using HTTP status codes 
         if (_response.statusCode == 400)
             _statusError = [[Status400Exception alloc] initWithReason: @"Bad Request"
                                               andContext:_context];
         else if((_response.statusCode < 200) || (_response.statusCode > 208)) //[200,208] = HTTP OK
             _statusError = [[APIError alloc] initWithReason: @"HTTP Response Not OK"
                                                  andContext:_context];

         if(_statusError != nil)
         {
             //announce completion with failure due to HTTP status code checking
             onCompleted(NO, _context, nil, _statusError);
         }
         else
         {
             //return _response to API caller
             NSString* _strResult = [(HttpStringResponse*)_response body];
             Status200* _result = (Status200*) [APIHelper jsonDeserialize: _strResult
                toClass: Status200.class];

 
             //announce completion with success
             onCompleted(YES, _context, _result, nil);
         }
     } failure:^(id _context, NSError *_error) {
 
         //announce completion with failure
         onCompleted(NO, _context, nil, _error);
     }];
}


@end
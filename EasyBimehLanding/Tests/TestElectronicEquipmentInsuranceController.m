//
//  EasyBimehLanding
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
//
#import <XCTest/XCTest.h>
#import "ElectronicEquipmentInsuranceController.h"
#import "TestHelper.h"
#import "TestBaseController.h"

@interface  TestElectronicEquipmentInsuranceController : TestBaseController
//Controller instance for all tests
@property ElectronicEquipmentInsuranceController* controller;
@end 


@implementation  TestElectronicEquipmentInsuranceController : TestBaseController

//Setup test class
//This method is called before the invocation of each test method in the test class
- (void)setUp {
    [super setUp];
    self.controller = [[ElectronicEquipmentInsuranceController alloc]init];
}

//Teardown test class
//This method is called after the invocation of each test method in the test class
- (void)tearDown {
    [super tearDown];
}	


// TODO: Add Description    
-(void) testDiviceFranchisee {
    //Set up test expectations
    XCTestExpectation *expectation =[self expectationWithDescription:@"High Expectations"];
    // Parameters for the API call
    int deviceModelId = [@"1340" intValue];
    NSString* xApiKey = @"d6dfd932-75d8-e911-811a-000c294ecf01";

    // Set callback and perform API call
    [self.controller getDiviceFranchiseeAsyncWithDeviceModelId: deviceModelId xApiKey : xApiKey  completionBlock:^(BOOL success, HttpContext* context, BaseModelDiviceFranchisee* response, NSError* error) { 
       // Test response code
        XCTAssertEqual(200, context.response.statusCode);
        
        // Test headers
        NSMutableDictionary* headers = [[NSMutableDictionary alloc] init];
        
        [headers setObject:[NSNull null]  forKey:@"Date"];
        
        [headers setObject:[NSNull null]  forKey:@"Content-Type"];
        
        [headers setObject:[NSNull null]  forKey:@"Transfer-Encoding"];
        
        [headers setObject:[NSNull null]  forKey:@"Connection"];
        
        [headers setObject:[NSNull null]  forKey:@"Keep-Alive"];
        
        [headers setObject:[NSNull null]  forKey:@"Vary"];
        
        [headers setObject:[NSNull null]  forKey:@"Cache-Control"];
        
        [headers setObject:[NSNull null]  forKey:@"Pragma"];
        
        [headers setObject:[NSNull null]  forKey:@"Expires"];
        
        [headers setObject:[NSNull null]  forKey:@"X-StackifyID"];
        
        [headers setObject:[NSNull null]  forKey:@"X-AspNet-Version"];
        
        [headers setObject:[NSNull null]  forKey:@"X-Powered-By"];
        
        [headers setObject:[NSNull null]  forKey:@"Server"];
        
        [headers setObject:[NSNull null]  forKey:@"AR-PoweredBy"];
        
        [headers setObject:[NSNull null]  forKey:@"ar-sid"];
        
        [headers setObject:[NSNull null]  forKey:@"AR-ATIME"];
        
        [headers setObject:[NSNull null]  forKey:@"AR-CACHE"];
        
        [headers setObject:[NSNull null]  forKey:@"AR-Request-ID"];
        
        [headers setObject:[NSNull null]  forKey:@"Content-Encoding"];
        NSDictionary *headersCopy = [headers copy];
        XCTAssertTrue([TestHelper isProperSubsetOf: headersCopy
               rightTree: context.response.headers 
             checkValues: YES
              allowExtra: YES
               isOrdered:NO]);

        // Test whether the captured response is not null
        XCTAssertTrue(response!=nil);
		// Test whether the captured response is as we expected
		NSString* rawBody = [[NSString alloc] initWithData:context.response.rawBody encoding:NSUTF8StringEncoding];		
        XCTAssertTrue([TestHelper isJsonObjectProperSubsetOf:@"{\r\n  \"isSuccess\": true,\r\n  \"status\": 200,\r\n  \"message\": [\r\n    {\r\n      \"id\": 5404,\r\n      \"title\": \"30%\",\r\n      \"extraData\": null\r\n    },\r\n    {\r\n      \"id\": 5401,\r\n      \"title\": \"40%\",\r\n      \"extraData\": null\r\n    }\r\n  ],\r\n  \"extraData\": null,\r\n  \"exception\": null\r\n}" 
                rightObject: rawBody
                checkValues: false
                allowExtra: true
                isOrdered: false]);
        [expectation fulfill];
    }];
    [self wait];
}



@end
